# Default values for lighthouse validator client.
# This is a YAML-formatted file.

# -- Overrides the chart's name
nameOverride: ""
# -- Overrides the chart's computed fullname
fullnameOverride: ""

global:
  # -- Ethereum default network. Example: mainnet, goerli, ephemery
  network: mainnet
  # -- List of Consenus Client (Beacon Nodes) endpoints available within cluster
  beaconNodes: 
    - http://geth-lighthouse-node:5052
  # -- Replicas
  replicas: 1
  # -- A list of pull secrets is used when credentials are needed to access a container registry with username and password.
  imagePullSecrets: {}
  podAnnotations: {}
  # -- Security Context
  securityContext:
    fsGroup: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
  containerSecurityContext: {}
    #capabilities:
    #  drop:
    #    - ALL
    #allowPrivilegeEscalation: false
    #seccompProfile:
    #  type: RuntimeDefault
  statefulSetAnnotations: {}
  updateStrategy:
    # -- Update stategy type
    type: RollingUpdate
  terminationGracePeriodSeconds: 120
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # PVC settings 
  persistence:
    # -- Access mode for the volume claim template
    accessModes:
    - ReadWriteOnce
    # -- Requested size for volume claim template. When using OpenEBS Local PV Device this ensures that a block device with sufficient storage is selected.
    size: 2Gi
    # -- Use a specific storage class.
    storageClassName: null
  serviceAccount:
    # -- Enable service account (Note: Service Account will only be automatically created if `global.serviceAccount.name` is not set)
    create: true
    # -- Annotations to add to the service account
    annotations: {}
    # -- Name of an already existing service account. Setting this value disables the automatic service account creation
    name: ""
  serviceMonitor:
    create: false
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
  service:
    # -- Service type, ClusterIP or LoadBalancer
    type: ClusterIP
    # -- Service annotations, e.g. for metallb: metallb.universe.tf/loadBalancerIPs: 10.1.2.3
    annotations: {}

# ephemery testnet
ephemery:
  # -- Name of the ephemery container
  name: ephemery-init
  # -- Specify ephemery github repository
  repository: ephemery-testnet/ephemery-genesis
  image:
    # -- Nixery.dev image
    repository: "nixery.dev/shell/gnutar/gzip/curl/jq/kubectl/gawk"
    # -- Container pull policy
    pullPolicy: "IfNotPresent"
    # -- Image tag
    tag: latest

# Lighthouse Validator Client values
lighthouse:
  # -- Name of the container
  name: "lighthouse"
  graffiti: "lighthouse"
  feeRecipient: "0xc90E920F4DCfd4954230edCaB168D0C5B9561e03"
  image:
    # -- Container image repository
    repository: "sigp/lighthouse"
    pullPolicy: "IfNotPresent"
    # -- Image tag
    tag: v6.0.1
  ports:
    # -- [Validator Client API](https://lighthouse-book.sigmaprime.io/api-vc.html) port
    httpJson: 5062
    # -- Metrics ports
    metrics: 6060
  # -- Specify the listen address of the lighthouse REST API server for the consensus client.
  httpInterface: "0.0.0.0"
  # 200 : VC is healthy
  livenessProbe:
    httpGet:
      # -- Path for [VC endpoints](https://lighthouse-book.sigmaprime.io/api-vc-endpoints.html)
      # NOTE: for /lighthouse/health the api token is required.
      path: /lighthouse/auth
      # -- Liveness probe http port, default is the lighthouse httpRest port.
      port: 5062
    initialDelaySeconds: 500
    periodSeconds: 30
  readinessProbe:
    httpGet:
      # -- Path for [VC endpoints](https://lighthouse-book.sigmaprime.io/api-vc-endpoints.html)
      # NOTE: for /lighthouse/health the api token is required.
      path: /lighthouse/auth
      # -- Readiness probe tcpSocket port, default is the lighthouse httpRest port.
      port: 5062
    initialDelaySeconds: 500
    periodSeconds: 30
  # -- Resource requests and limits
  resources: {}
  # limits:
      # cpu: 500m
      # memory: 2Gi
  # requests:
  #   cpu: 2000m
  #   memory: 4Gi
  serviceMonitor:
    enabled: false
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s